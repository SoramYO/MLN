"use client"
import { useState, useMemo, useEffect } from "react"

// --- C·∫§U H√åNH GAME ---
const GRID_SIZE = 5
const INITIAL_RESOURCES = 1200
const INITIAL_TURNS = 10
const COST_PER_BUILD = 100
const POINTS_PER_BUILD = 50
const SPECIALIZATION_BONUS = 75
const UNITY_BONUS = 150

const INSTR_KEY = "unityInstructionsSeen"

// --- C√ÅC LO·∫†I C√îNG TR√åNH ---
const BUILDING_TYPES = {
  ECONOMY: { name: "Kinh t·∫ø", color: "bg-green-500", icon: "üìà" },
  CULTURE: { name: "VƒÉn h√≥a", color: "bg-purple-500", icon: "üé≠" },
  SOCIETY: { name: "X√£ h·ªôi", color: "bg-blue-500", icon: "üè´" },
}

const BUILDINGS = [
  { id: "b1", name: "Nh√† R√¥ng", type: "CULTURE", ethnicity: "Ba Na, Gia Rai", points: 20 },
  { id: "b2", name: "Ru·ªông b·∫≠c thang", type: "ECONOMY", ethnicity: "H'M√¥ng, Dao", points: 30 },
  { id: "b3", name: "Ch·ª£ n·ªïi", type: "ECONOMY", ethnicity: "Kinh, Khmer", points: 30 },
  { id: "b4", name: "Tr∆∞·ªùng D√¢n t·ªôc N·ªôi tr√∫", type: "SOCIETY", ethnicity: "Nhi·ªÅu d√¢n t·ªôc", points: 25 },
  { id: "b5", name: "Th√°p ChƒÉm Pa", type: "CULTURE", ethnicity: "ChƒÉm", points: 20 },
  { id: "b6", name: "L√†ng d·ªát th·ªï c·∫©m", type: "CULTURE", ethnicity: "Th√°i, M∆∞·ªùng", points: 20 },
  { id: "b7", name: "Tr·∫°m y t·∫ø x√£", type: "SOCIETY", ethnicity: "Nhi·ªÅu d√¢n t·ªôc", points: 25 },
  { id: "b8", name: "V∆∞·ªùn c√† ph√™", type: "ECONOMY", ethnicity: "√ä ƒê√™, M'n√¥ng", points: 35 },
];

// --- NG√ÇN H√ÄNG C√ÇU H·ªéI ƒê·∫¶Y ƒê·ª¶ ---
const FULL_QUESTION_BANK = [
    { q: "Theo M√°c - L√™nin, nguy√™n t·∫Øc n√†o gi·ªØ vai tr√≤ ch·ªß ƒë·∫°o trong C∆∞∆°ng lƒ©nh d√¢n t·ªôc?", options: [{ t: "Li√™n hi·ªáp c√¥ng nh√¢n t·∫•t c·∫£ c√°c d√¢n t·ªôc", correct: true }, { t: "C√°c d√¢n t·ªôc ho√†n to√†n b√¨nh ƒë·∫≥ng", correct: false }, { t: "C√°c d√¢n t·ªôc c√≥ quy·ªÅn t·ª± quy·∫øt", correct: false }] },
    { q: "Ch√≠nh s√°ch nh·∫•t qu√°n c·ªßa ƒê·∫£ng v√† Nh√† n∆∞·ªõc Vi·ªát Nam v·ªÅ v·∫•n ƒë·ªÅ d√¢n t·ªôc l√† g√¨?", options: [{ t: "B√¨nh ƒë·∫≥ng, ƒëo√†n k·∫øt, t√¥n tr·ªçng, gi√∫p nhau c√πng ph√°t tri·ªÉn", correct: true }, { t: "ƒê·ªìng h√≥a vƒÉn h√≥a ƒë·ªÉ t·∫°o s·ª± th·ªëng nh·∫•t", correct: false }, { t: "ƒê·ªÉ c√°c d√¢n t·ªôc t·ª± ph√°t tri·ªÉn m√† kh√¥ng can thi·ªáp", correct: false }] },
    { q: "S·ª± ch√™nh l·ªách ph√°t tri·ªÉn gi·ªØa c√°c v√πng ·ªü Vi·ªát Nam ch·ªß y·∫øu l√† do ƒë√¢u?", options: [{ t: "H·ªá qu·∫£ kh√°ch quan c·ªßa ƒëi·ªÅu ki·ªán l·ªãch s·ª≠, ƒë·ªãa l√Ω", correct: true }, { t: "Ch·ªß tr∆∞∆°ng c·ªßa nh√† n∆∞·ªõc", correct: false }, { t: "Do ng∆∞·ªùi d√¢n kh√¥ng mu·ªën ph√°t tri·ªÉn", correct: false }] },
    { q: "C∆° quan n√†o c·ªßa Qu·ªëc h·ªôi Vi·ªát Nam c√≥ vai tr√≤ ch√≠nh trong vi·ªác th·∫©m tra c√°c ch√≠nh s√°ch li√™n quan ƒë·∫øn d√¢n t·ªôc?", options: [{ t: "H·ªôi ƒë·ªìng D√¢n t·ªôc", correct: true }, { t: "·ª¶y ban Kinh t·∫ø", correct: false }, { t: "·ª¶y ban Ph√°p lu·∫≠t", correct: false }] },
    { q: "Vi·ªác c√≥ k√™nh truy·ªÅn h√¨nh VTV5 ph√°t s√≥ng b·∫±ng nhi·ªÅu th·ª© ti·∫øng d√¢n t·ªôc th·ªÉ hi·ªán ƒëi·ªÅu g√¨?", options: [{ t: "S·ª± t√¥n tr·ªçng v√† n·ªó l·ª±c b·∫£o t·ªìn b·∫£n s·∫Øc vƒÉn h√≥a", correct: true }, { t: "S·ª± l√£ng ph√≠ kh√¥ng c·∫ßn thi·∫øt", correct: false }, { t: "ƒê√¢y l√† k√™nh d√†nh ri√™ng cho ng∆∞·ªùi n∆∞·ªõc ngo√†i", correct: false }] },
    { q: "ƒê·∫∑c ƒëi·ªÉm n√†o l√† c∆° s·ªü v·ªØng ch·∫Øc nh·∫•t cho kh·ªëi ƒë·∫°i ƒëo√†n k·∫øt d√¢n t·ªôc ·ªü Vi·ªát Nam?", options: [{ t: "Truy·ªÅn th·ªëng ƒëo√†n k·∫øt l√¢u ƒë·ªùi trong l·ªãch s·ª≠", correct: true }, { t: "S·ª± t∆∞∆°ng ƒë·ªìng tuy·ªát ƒë·ªëi v·ªÅ kinh t·∫ø", correct: false }, { t: "T·∫•t c·∫£ c√°c d√¢n t·ªôc ƒë·ªÅu s·ªëng ·ªü ƒë·ªìng b·∫±ng", correct: false }] },
    { q: "Theo Ch·ªß nghƒ©a M√°c - L√™nin, ngu·ªìn g·ªëc s√¢u xa c·ªßa t√¥n gi√°o l√† g√¨?", options: [{ t: "S·ª± b·∫ßn c√πng, √°p b·ª©c v√† b√≥c l·ªôt", correct: true }, { t: "S·ª± ph√°t tri·ªÉn c·ªßa khoa h·ªçc", correct: false }, { t: "Nhu c·∫ßu gi·∫£i tr√≠ c·ªßa con ng∆∞·ªùi", correct: false }] },
    { q: "Nguy√™n t·∫Øc n√†o sau ƒë√¢y KH√îNG ph·∫£i l√† nguy√™n t·∫Øc gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ t√¥n gi√°o c·ªßa CNXH khoa h·ªçc?", options: [{ t: "D√πng m·ªánh l·ªánh h√†nh ch√≠nh ƒë·ªÉ c·∫•m ƒëo√°n t√¥n gi√°o", correct: true }, { t: "T√¥n tr·ªçng quy·ªÅn t·ª± do t√≠n ng∆∞·ª°ng, kh√¥ng t√≠n ng∆∞·ª°ng", correct: false }, { t: "Ph√¢n bi·ªát m·∫∑t ch√≠nh tr·ªã v√† t∆∞ t∆∞·ªüng c·ªßa t√¥n gi√°o", correct: false }] },
    { q: "Ch√≠nh s√°ch 'c·ª≠ tuy·ªÉn' c·ªßa Nh√† n∆∞·ªõc Vi·ªát Nam nh·∫±m m·ª•c ƒë√≠ch ch√≠nh l√† g√¨?", options: [{ t: "ƒê√†o t·∫°o ngu·ªìn nh√¢n l·ª±c ch·∫•t l∆∞·ª£ng cao l√† ng∆∞·ªùi d√¢n t·ªôc thi·ªÉu s·ªë", correct: true }, { t: "Khuy·∫øn kh√≠ch h·ªçc sinh ƒëi du h·ªçc", correct: false }, { t: "Gi·∫£m s·ªë l∆∞·ª£ng sinh vi√™n ƒë·∫°i h·ªçc", correct: false }] },
    { q: "ƒê·∫∑c ƒëi·ªÉm c∆∞ tr√∫ n√†o c·ªßa c√°c d√¢n t·ªôc ·ªü Vi·ªát Nam t·∫°o ƒëi·ªÅu ki·ªán cho s·ª± giao l∆∞u nh∆∞ng c≈©ng ti·ªÅm ·∫©n th√°ch th·ª©c v·ªÅ ƒëo√†n k·∫øt?", options: [{ t: "C∆∞ tr√∫ ƒëan xen", correct: true }, { t: "C∆∞ tr√∫ bi·ªát l·∫≠p", correct: false }, { t: "Ch·ªâ s·ªëng ·ªü th√†nh ph·ªë", correct: false }] },
    { q: "H√†nh vi n√†o sau ƒë√¢y b·ªã ph√°p lu·∫≠t Vi·ªát Nam nghi√™m c·∫•m trong lƒ©nh v·ª±c t√¥n gi√°o?", options: [{ t: "L·ª£i d·ª•ng t√¥n gi√°o ƒë·ªÉ chia r·∫Ω d√¢n t·ªôc, ch·ªëng ph√° Nh√† n∆∞·ªõc", correct: true }, { t: "X√¢y d·ª±ng c∆° s·ªü th·ªù t·ª± m·ªõi", correct: false }, { t: "Th·ª±c h√†nh nghi l·ªÖ t√¥n gi√°o t·∫°i nh√†", correct: false }] },
];

// --- C√ÅC TYPE & H√ÄM KH·ªûI T·∫†O ---
type Building = typeof BUILDINGS[0]
type Cell = { row: number; col: number; buildingId: string | null }

function buildInitialGrid(): Cell[] {
  const cells: Cell[] = []
  for (let r = 0; r < GRID_SIZE; r++) {
    for (let c = 0; c < GRID_SIZE; c++) {
      cells.push({ row: r, col: c, buildingId: null })
    }
  }
  return cells
}

// --- COMPONENT GAME CH√çNH ---
export default function UnityVillageGame() {
  const [grid, setGrid] = useState<Cell[]>(() => buildInitialGrid())
  const [resources, setResources] = useState(INITIAL_RESOURCES)
  const [turns, setTurns] = useState(INITIAL_TURNS)
  const [score, setScore] = useState(0)
  const [selectedBuilding, setSelectedBuilding] = useState<Building | null>(BUILDINGS[0])
  const [message, setMessage] = useState("Ch√†o m·ª´ng! H√£y xem h∆∞·ªõng d·∫´n v√† b·∫Øt ƒë·∫ßu x√¢y d·ª±ng.")
  const [showQuestion, setShowQuestion] = useState(false)
  const [questionIndex, setQuestionIndex] = useState(0)
  const [shuffledQuestions, setShuffledQuestions] = useState<typeof FULL_QUESTION_BANK>([]);
  const [showInstructions, setShowInstructions] = useState(false)
  const [gameEnded, setGameEnded] = useState(false)
  const [showAnswerFeedback, setShowAnswerFeedback] = useState(false)
  const [answerMessage, setAnswerMessage] = useState("")

  useEffect(() => {
    setShuffledQuestions([...FULL_QUESTION_BANK].sort(() => Math.random() - 0.5));
    try {
      const seenLocal = localStorage.getItem(INSTR_KEY)
      const seenSession = sessionStorage.getItem(INSTR_KEY)
      // debug (one-time console):
      if (!seenLocal && !seenSession) console.info("[UnityJourney] show instructions (no stored flag)")
      if (seenLocal === "1" || seenSession === "1") {
        setShowInstructions(false)
      } else {
        setShowInstructions(true)
      }
    } catch {}
  }, []);

  const question = useMemo(() => {
    if (shuffledQuestions.length === 0) return null;
    return shuffledQuestions[questionIndex % shuffledQuestions.length];
  }, [questionIndex, shuffledQuestions]);

  // Ki·ªÉm tra xem t·∫•t c·∫£ √¥ ƒë√£ ƒë∆∞·ª£c x√¢y d·ª±ng ch∆∞a
  const isGridFull = useMemo(() => {
    return grid.every(cell => cell.buildingId !== null);
  }, [grid]);

  const getCell = (r: number, c: number) => grid.find(cell => cell.row === r && cell.col === c);

  const markInstructionsSeen = () => {
    try {
      localStorage.setItem(INSTR_KEY, "1")
      sessionStorage.setItem(INSTR_KEY, "1")
    } catch {}
  }

  const handleBuild = (cell: Cell) => {
    // b·∫•t k·ª≥ thao t√°c ch∆°i n√†o c≈©ng coi nh∆∞ ƒë√£ xem h∆∞·ªõng d·∫´n
    if (showInstructions) {
      setShowInstructions(false)
      markInstructionsSeen()
    }

    if (cell.buildingId || !selectedBuilding || gameEnded) return;
    if (turns <= 0) {
      setMessage("‚ö†Ô∏è ƒê√£ h·∫øt l∆∞·ª£t! H√£y tr·∫£ l·ªùi c√¢u h·ªèi ƒë·ªÉ c√≥ th√™m l∆∞·ª£t.");
      setShowQuestion(true);
      return;
    }
    if (resources < COST_PER_BUILD) {
      setMessage("‚ö†Ô∏è Kh√¥ng ƒë·ªß v·ªën ƒë·ªÉ x√¢y d·ª±ng!");
      return;
    }

    let bonus = 0;
    let bonusMessage = "";

    const neighbors = [
        getCell(cell.row - 1, cell.col), getCell(cell.row + 1, cell.col),
        getCell(cell.row, cell.col - 1), getCell(cell.row, cell.col + 1),
    ].filter((n): n is Cell => n !== undefined && n.buildingId !== null);

    const newBuildingInfo = BUILDINGS.find(b => b.id === selectedBuilding.id);
    if(newBuildingInfo) {
        for(const neighbor of neighbors) {
            const neighborBuildingInfo = BUILDINGS.find(b => b.id === neighbor.buildingId);
            if(neighborBuildingInfo) {
                if(neighborBuildingInfo.type === newBuildingInfo.type) {
                    bonus += SPECIALIZATION_BONUS;
                    bonusMessage += `ü§ù +${SPECIALIZATION_BONUS}ƒë Chuy√™n m√¥n h√≥a! `;
                }
                if(neighborBuildingInfo.type !== newBuildingInfo.type && neighborBuildingInfo.ethnicity !== newBuildingInfo.ethnicity) {
                    bonus += UNITY_BONUS;
                    bonusMessage += `üíñ +${UNITY_BONUS}ƒë ƒê·∫°i ƒêo√†n K·∫øt! `;
                }
            }
        }
    }
    
    setGrid(prev => prev.map(c => (c.row === cell.row && c.col === cell.col ? { ...c, buildingId: selectedBuilding.id } : c)))
    setTurns(t => t - 1)
    setResources(r => r - COST_PER_BUILD)
    setScore(s => s + POINTS_PER_BUILD + (newBuildingInfo?.points || 0) + bonus)
    setMessage(`X√¢y d·ª±ng ${selectedBuilding.name} th√†nh c√¥ng! ${bonusMessage || ""}`);
    
    // Ki·ªÉm tra xem ƒë√£ x√¢y ƒë·∫ßy b·∫£n ƒë·ªì ch∆∞a
    const updatedGrid = grid.map(c => (c.row === cell.row && c.col === cell.col ? { ...c, buildingId: selectedBuilding.id } : c))
    const isFull = updatedGrid.every(cell => cell.buildingId !== null);
    
    if (isFull && !gameEnded) {
      setGameEnded(true);
      setMessage(`üéâ CHI·∫æN TH·∫ÆNG! B·∫°n ƒë√£ x√¢y d·ª±ng ho√†n th√†nh ng√¥i l√†ng v·ªõi ${score + POINTS_PER_BUILD + (newBuildingInfo?.points || 0) + bonus} ƒëi·ªÉm!`);
    }
    
    if((INITIAL_TURNS - turns - 1) % 3 === 2 && turns > 0 && !isFull) {
        setShowQuestion(true);
    }
  }
  
  const answerQuestion = (isCorrect: boolean) => {
    setShowQuestion(false);
    
    if(isCorrect) {
        setTurns(t => t + 2);
        setResources(r => r + 200);
        setAnswerMessage("‚úÖ Ch√≠nh x√°c! B·∫°n nh·∫≠n ƒë∆∞·ª£c +2 l∆∞·ª£t v√† +200 v·ªën!");
        setShowAnswerFeedback(true);
        setTimeout(() => {
          setShowAnswerFeedback(false);
        }, 3000);
    } else {
        setAnswerMessage("‚ùå Ch∆∞a ƒë√∫ng r·ªìi. C·ªë g·∫Øng ·ªü c√¢u h·ªèi sau nh√©!");
        setShowAnswerFeedback(true);
        setTimeout(() => {
          setShowAnswerFeedback(false);
        }, 3000);
    }
    setQuestionIndex(i => i + 1);
  }

  const dismissInstructions = () => {
    setShowInstructions(false)
    markInstructionsSeen()
  }

  const resetGame = () => {
    setGrid(buildInitialGrid())
    setResources(INITIAL_RESOURCES)
    setTurns(INITIAL_TURNS)
    setScore(0)
    setSelectedBuilding(BUILDINGS[0])
    setMessage("Ch√†o m·ª´ng! H√£y xem h∆∞·ªõng d·∫´n v√† b·∫Øt ƒë·∫ßu x√¢y d·ª±ng.")
    setQuestionIndex(0)
    setGameEnded(false)
    setShowAnswerFeedback(false)
    setAnswerMessage("")
    setShuffledQuestions([...FULL_QUESTION_BANK].sort(() => Math.random() - 0.5))
  }
  
  if (!question) return <div>ƒêang t·∫£i game...</div>;

  return (
    <div className="p-4 max-w-4xl mx-auto font-sans bg-gray-50 rounded-lg shadow-lg">
        {/* --- H∆Ø·ªöNG D·∫™N CH∆†I --- */}
        {showInstructions && (
            <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50 p-4" onClick={dismissInstructions}>
                <div className="bg-white p-6 rounded-xl shadow-2xl w-full max-w-lg animate-fade-in" onClick={e => e.stopPropagation()}>
                    <h2 className="text-2xl font-bold mb-3 text-center">üìú H∆∞·ªõng D·∫´n Ch∆°i</h2>
                    <div className="text-sm space-y-3 text-gray-700">
                        <p><strong>üéØ M·ª•c ti√™u:</strong> ƒê·∫°t ƒëi·ªÉm cao nh·∫•t b·∫±ng c√°ch x√¢y d·ª±ng m·ªôt ng√¥i l√†ng h√†i h√≤a v√† th·ªãnh v∆∞·ª£ng.</p>
                        <div>
                            <strong>üïπÔ∏è C√°ch ch∆°i:</strong>
                            <ul className="list-disc list-inside ml-4 space-y-1 mt-1">
                                <li><strong>Ch·ªçn c√¥ng tr√¨nh</strong> ·ªü c·ªôt b√™n tr√°i.</li>
                                <li><strong>Nh·∫•p v√†o √¥ ƒë·∫•t tr·ªëng</strong> (+) tr√™n b·∫£n ƒë·ªì ƒë·ªÉ x√¢y.</li>
                                <li>M·ªói l·∫ßn x√¢y t·ªën <strong>100 V·ªën</strong> v√† <strong>1 L∆∞·ª£t</strong>.</li>
                                <li>H·∫øt l∆∞·ª£t, h√£y tr·∫£ l·ªùi c√¢u h·ªèi ƒë·ªÉ c√≥ th√™m.</li>
                            </ul>
                        </div>
                        <div>
                            <strong>üèÜ Quy lu·∫≠t t√≠nh ƒëi·ªÉm:</strong>
                             <ul className="list-disc list-inside ml-4 space-y-1 mt-1">
                                <li><strong>ƒêi·ªÉm c∆° b·∫£n:</strong> +50 ƒëi·ªÉm cho m·ªói l·∫ßn x√¢y.</li>
                                <li><strong>ü§ù ƒêi·ªÉm Chuy√™n m√¥n h√≥a (+75ƒë):</strong> X√¢y c·∫°nh c√¥ng tr√¨nh kh√°c <strong>c√πng lƒ©nh v·ª±c</strong> (c√πng m√†u).</li>
                                <li><strong className="text-blue-600">üíñ ƒêi·ªÉm ƒê·∫†I ƒêO√ÄN K·∫æT (+150ƒë):</strong> X√¢y c·∫°nh c√¥ng tr√¨nh kh√°c <strong>kh√°c lƒ©nh v·ª±c V√Ä kh√°c b·∫£n s·∫Øc d√¢n t·ªôc</strong>. ƒê√¢y l√† ch√¨a kh√≥a ƒë·ªÉ ƒë·∫°t ƒëi·ªÉm cao nh·∫•t!</li>
                            </ul>
                        </div>
                    </div>
                    <div className="text-center mt-5">
                         <button onClick={dismissInstructions} className="px-6 py-2 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition-colors">B·∫Øt ƒë·∫ßu ch∆°i!</button>
                    </div>
                </div>
            </div>
        )}

      <div className="flex justify-between items-center mb-4">
        <h2 className="text-3xl font-bold text-gray-800">üè° Ng√¥i L√†ng ƒê·∫°i ƒêo√†n K·∫øt</h2>
        <div className="flex gap-2">
          <button onClick={() => setShowInstructions(true)} className="px-3 py-1.5 text-xs bg-gray-200 text-gray-700 font-semibold rounded-md hover:bg-gray-300">? H∆∞·ªõng d·∫´n</button>
          {gameEnded && (
            <button onClick={resetGame} className="px-3 py-1.5 text-xs bg-green-500 text-white font-semibold rounded-md hover:bg-green-600">üîÑ Ch∆°i l·∫°i</button>
          )}
        </div>
      </div>
      
      <div className="grid grid-cols-3 gap-4 bg-white p-3 rounded-lg mb-4 text-center text-sm shadow">
        <div>üèÜ ƒêi·ªÉm: <span className="font-bold text-lg text-blue-600">{score}</span></div>
        <div>üí∞ V·ªën: <span className="font-bold text-lg text-green-600">{resources}</span></div>
        <div>‚ö° L∆∞·ª£t: <span className={`font-bold text-lg ${turns <= 2 ? "text-red-600 animate-pulse" : "text-yellow-600"}`}>{turns}</span></div>
      </div>
      
      {message && (
        <div className={`text-center mb-4 p-3 rounded-md text-sm border ${
          gameEnded 
            ? "bg-gradient-to-r from-yellow-100 to-orange-100 text-orange-800 border-orange-300 shadow-lg" 
            : "bg-blue-100 text-blue-800 border-blue-200"
        }`}>
          {message}
        </div>
      )}

      {/* Th√¥ng b√°o khi tr·∫£ l·ªùi c√¢u h·ªèi */}
      {showAnswerFeedback && (
        <div className="fixed top-4 right-4 bg-white p-4 rounded-xl shadow-2xl border-2 border-green-300 z-40 animate-fade-in">
          <p className="text-center font-semibold text-gray-800">{answerMessage}</p>
        </div>
      )}

      <div className="flex flex-col md:flex-row gap-6">
        <div className="md:w-1/3">
            <h3 className="font-bold mb-2 text-gray-700">Danh s√°ch c√¥ng tr√¨nh:</h3>
            <div className="grid gap-2">
                {BUILDINGS.map(b => {
                    const typeInfo = BUILDING_TYPES[b.type as keyof typeof BUILDING_TYPES];
                    return (
                        <button key={b.id} onClick={() => setSelectedBuilding(b)}
                            className={`p-2 rounded-lg border-2 text-left transition-all w-full ${selectedBuilding?.id === b.id ? 'border-blue-500 bg-blue-50 shadow-md' : 'border-transparent hover:bg-gray-100'}`}>
                            <div className="flex items-center gap-3">
                                <span className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-lg ${typeInfo.color}`}>{typeInfo.icon}</span>
                                <div>
                                    <div className="font-semibold text-sm">{b.name}</div>
                                    <div className="text-xs text-gray-500">{b.ethnicity}</div>
                                </div>
                            </div>
                        </button>
                    )
                })}
            </div>
        </div>

        <div className="md:w-2/3">
            <div className="grid gap-1 bg-green-100 p-2 rounded-lg aspect-square" style={{ gridTemplateColumns: `repeat(${GRID_SIZE}, 1fr)` }}>
            {grid.map((cell) => {
                const building = BUILDINGS.find(b => b.id === cell.buildingId);
                const typeInfo = building ? BUILDING_TYPES[building.type as keyof typeof BUILDING_TYPES] : null;
                return (
                <button
                    key={`${cell.row}-${cell.col}`}
                    onClick={() => handleBuild(cell)}
                    disabled={gameEnded}
                    className={`aspect-square rounded-md flex items-center justify-center transition-all duration-300 transform ${
                        gameEnded 
                            ? "cursor-not-allowed opacity-75" 
                            : "hover:scale-105"
                    } ${
                        building
                        ? `${typeInfo?.color} text-white text-3xl shadow-lg`
                        : gameEnded 
                            ? "bg-gray-200" 
                            : "bg-green-50 hover:bg-green-200"
                    }`}
                    title={building ? `${building.name} (${building.ethnicity})` : gameEnded ? "Game ƒë√£ k·∫øt th√∫c" : `X√¢y d·ª±ng (Chi ph√≠: ${COST_PER_BUILD} v·ªën)`}
                >
                    {building ? typeInfo?.icon : gameEnded ? "‚úì" : <span className="text-gray-400 text-xl">+</span>}
                </button>
                )
            })}
            </div>
        </div>
      </div>
      
      {/* Modal c√¢u h·ªèi */}
      {showQuestion && !gameEnded && (
        <div className="fixed inset-0 bg-black/60 flex items-center justify-center z-50 animate-fade-in p-4">
            <div className="bg-white p-6 rounded-xl shadow-2xl w-full max-w-lg">
                <h3 className="font-bold text-xl mb-3 text-gray-800">üí° Th·ª≠ th√°ch ki·∫øn th·ª©c!</h3>
                <p className="mb-5 text-gray-700">{question.q}</p>
                <div className="grid gap-3">
                    {question.options.map((opt, idx) => (
                        <button 
                            key={idx}
                            onClick={() => answerQuestion(opt.correct)}
                            className="w-full text-left p-3 rounded-lg bg-gray-50 border border-gray-200 hover:bg-blue-100 hover:border-blue-300 transition-all"
                        >
                           <span className="font-semibold">{String.fromCharCode(65 + idx)}.</span> {opt.t}
                        </button>
                    ))}
                </div>
            </div>
        </div>
      )}

      {/* Modal chi·∫øn th·∫Øng */}
      {gameEnded && (
        <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50 animate-fade-in p-4" onClick={resetGame}>
            <div className="bg-gradient-to-br from-yellow-100 to-orange-100 p-8 rounded-2xl shadow-2xl w-full max-w-md text-center border-4 border-yellow-400" onClick={e => e.stopPropagation()}>
                <div className="text-6xl mb-4">üèÜ</div>
                <h2 className="text-3xl font-bold text-gray-800 mb-4">CHI·∫æN TH·∫ÆNG!</h2>
                <p className="text-lg text-gray-700 mb-6">
                    Ch√∫c m·ª´ng! B·∫°n ƒë√£ x√¢y d·ª±ng ho√†n th√†nh ng√¥i l√†ng ƒë·∫°i ƒëo√†n k·∫øt v·ªõi <span className="font-bold text-orange-600">{score} ƒëi·ªÉm</span>!
                </p>
                <div className="bg-white/50 rounded-lg p-4 mb-6">
                    <p className="text-sm text-gray-600 mb-2">üìä Th·ªëng k√™:</p>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                        <div>T·ªïng ƒëi·ªÉm: <span className="font-bold text-blue-600">{score}</span></div>
                        <div>C√¥ng tr√¨nh: <span className="font-bold text-green-600">25</span></div>
                        <div>V·ªën c√≤n l·∫°i: <span className="font-bold text-purple-600">{resources}</span></div>
                        <div>L∆∞·ª£t c√≤n: <span className="font-bold text-orange-600">{turns}</span></div>
                    </div>
                </div>
                <button 
                    onClick={resetGame}
                    className="w-full px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white font-bold rounded-lg shadow-lg hover:from-green-600 hover:to-green-700 transition-all duration-300 transform hover:scale-105"
                >
                    üéÆ Ch∆°i l·∫°i
                </button>
            </div>
        </div>
      )}
    </div>
  )
}